import streamlit as st
import pandas as pd
import numpy as np
import networkx as nx
from pyvis.network import Network
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
import seaborn as sns
import tempfile
import os

# Configura√ß√£o da p√°gina
st.set_page_config(layout="wide", page_title="An√°lise de Redes")
st.title("üîç An√°lise e Visualiza√ß√£o de Redes")
st.markdown(
    """
Esta aplica√ß√£o analisa redes a partir de dados de relacionamento.
Carregue um arquivo CSV com colunas 'source' e 'target' para come√ßar.
"""
)

# Upload do arquivo
uploaded_file = st.file_uploader("Escolha um arquivo CSV", type="csv")

if uploaded_file:
    # Processamento dos dados
    df = pd.read_csv(uploaded_file)
    df.dropna(subset=["source", "target"], inplace=True)
    G = nx.from_pandas_edgelist(
        df, source="source", target="target", create_using=nx.DiGraph()
    )
    G.remove_edges_from(nx.selfloop_edges(G))

    st.success(
        f"Grafo carregado: {G.number_of_nodes()} n√≥s e {G.number_of_edges()} arestas"
    )

    # =============================================
    # M√âTRICAS ESTRUTURAIS(Sem filtros)
    # =============================================
    # TEXTOS DE AJUDA (M√©tricas Estruturais)
    help_densidade = (
        "A densidade √© a raz√£o entre o n√∫mero de arestas existentes e o n√∫mero m√°ximo poss√≠vel. "
        "Varia de 0 a 1.\n\n"
        "- 0: grafo extremamente esparso (poucas conex√µes)\n"
        "- 1: grafo completamente conectado (todos os n√≥s se conectam entre si)\n\n"
        "√ötil para entender qu√£o interligada √© a rede."
    )
    help_assortatividade = (
        "Mede a tend√™ncia de n√≥s se conectarem com outros de grau similar. "
        "Varia de -1 a +1.\n\n"
        "- Valor > 0: n√≥s com grau alto conectam-se a outros com grau alto (ex: redes sociais)\n"
        "- Valor < 0: n√≥s com grau alto conectam-se a n√≥s com grau baixo (ex: redes tecnol√≥gicas)\n"
        "- Valor ‚âà 0: conex√µes s√£o aleat√≥rias em rela√ß√£o ao grau dos n√≥s\n\n"
        "Ajuda a entender o padr√£o de conex√µes da rede."
    )
    help_clustering = (
        "Mede o grau de agrupamento (forma√ß√£o de tri√¢ngulos) entre os vizinhos de um n√≥. "
        "Varia de 0 a 1.\n\n"
        "- Valor pr√≥ximo de 1: forte tend√™ncia de formar grupos (alta coes√£o local)\n"
        "- Valor pr√≥ximo de 0: pouca ou nenhuma forma√ß√£o de grupos\n\n"
        "Comum em redes sociais e redes pequenas-mundo."
    )
    help_scc = (
        "N√∫mero de subgrafos nos quais **cada n√≥ pode alcan√ßar todos os outros seguindo a dire√ß√£o das arestas**.\n\n"
        "- Relevante em redes dirigidas (como grafos de cita√ß√µes ou hyperlinks).\n"
        "- Valor maior indica uma rede mais fragmentada em termos de alcance direcional.\n"
        "- Um √∫nico componente forte sugere alta conectividade m√∫tua.\n\n"
        "Ex: Em um SCC, se A alcan√ßa B, ent√£o B tamb√©m alcan√ßa A por algum caminho dirigido."
    )

    help_wcc = (
        "N√∫mero de subgrafos nos quais os n√≥s est√£o conectados **se ignorarmos a dire√ß√£o das arestas**.\n\n"
        "- Mede a conectividade geral da estrutura, desconsiderando direcionalidade.\n"
        "- √ötil para avaliar fragmenta√ß√£o estrutural bruta da rede.\n"
        "- Um √∫nico componente fraco indica que todos os n√≥s est√£o ligados por algum caminho (mesmo que indirecional).\n\n"
        "Ex: A pode n√£o alcan√ßar B na dire√ß√£o correta, mas ainda faz parte do mesmo grupo fraco."
    )

    def calcular_assortatividade_segura(grafo):
        """
        Calcula o coeficiente de assortatividade de forma segura, evitando erros em grafos esparsos.
        
        Args:
            grafo: Um grafo NetworkX (Graph ou DiGraph)
        
        Returns:
            float: Valor da assortatividade ou None se n√£o for poss√≠vel calcular
        """
        try:
            # Verifica se o grafo tem n√≥s suficientes e varia√ß√£o de graus
            if grafo.number_of_nodes() < 2:
                return None
                
            degrees = [d for _, d in grafo.degree()]
            if len(set(degrees)) < 2:  # Todos os n√≥s t√™m o mesmo grau
                return None
                
            return nx.degree_assortativity_coefficient(grafo)
        except (ZeroDivisionError, nx.NetworkXError):
            return None
    

# =============================================
# M√âTRICAS ESTRUTURAIS E VISUALIZA√á√ÉO EST√ÅTICA
# =============================================
    with st.expander("üìä M√©tricas Estruturais da Rede", expanded=False):
        col1, col2 = st.columns(2)

        with col1:
            st.metric("Densidade", f"{nx.density(G):.4f}", help=help_densidade)
            assort = calcular_assortatividade_segura(G)
            st.metric(
                "Assortatividade(grau do n√≥)",
                f"{assort:.4f}" if assort is not None else "N/A",
                help=help_assortatividade,
            )
            st.metric(
                "Coef. Clustering",
                f"{nx.average_clustering(G.to_undirected()):.4f}",
                help=help_clustering,
            )

        with col2:
            scc = (
                nx.number_strongly_connected_components(G)
                if nx.is_directed(G)
                else "N/A"
            )
            st.metric("Componentes Fortemente Conectados", scc, help=help_scc)
            st.metric(
                "Componentes Fracamente Conectados",
                nx.number_weakly_connected_components(G),
                help=help_wcc,
            )

# =============================================
# VISUALIZA√á√ÉO EST√ÅTICA
# =============================================

    with st.expander("üìä Visualiza√ß√£o Est√°tica do Grafo (M√©tricas de Centralidade)", expanded=False):
        st.markdown("""
        ## Compara√ß√£o Visual das M√©tricas de Centralidade
        
        - **Tamanho do n√≥**: proporcional √† centralidade
        - **Cor**: escala cont√≠nua de import√¢ncia (azul ‚Üí vermelho, personaliz√°vel)
        """)

        col1, col2 = st.columns(2)
        with col1:
            layout_option = st.selectbox(
                "Layout de visualiza√ß√£o:",
                ["Spring", "Circular", "Kamada-Kawai", "Random"],
                key="layout_option"
            )
        with col2:
            metric_option = st.selectbox(
                "M√©trica de Centralidade:",
                ["Degree Centrality", "Closeness Centrality", "Betweenness Centrality", "Eigenvector Centrality"],
                key="static_viz_metric"
            )

        generate_plot = st.button("üìà Gerar Visualiza√ß√£o Est√°tica")

        if generate_plot:
            # Layouts
            layouts = {
                "Spring": nx.spring_layout(G, k=0.15, iterations=20, seed=42),
                "Circular": nx.circular_layout(G),
                "Kamada-Kawai": nx.kamada_kawai_layout(G),
                "Random": nx.random_layout(G, seed=42)
            }
            pos = layouts.get(layout_option, nx.spring_layout(G))

            # C√°lculo da m√©trica
            centrality = {}
            try:
                centrality_methods = {
                    "Degree Centrality": (nx.degree_centrality, "Degree Centrality (Mais conex√µes)"),
                    "Closeness Centrality": (nx.closeness_centrality, "Closeness Centrality (Acesso r√°pido)"),
                    "Betweenness Centrality": (nx.betweenness_centrality, "Betweenness Centrality (Pontes estrat√©gicas)"),
                    "Eigenvector Centrality": (lambda G: nx.eigenvector_centrality(G, max_iter=1000), "Eigenvector Centrality (Influ√™ncia)")
                }
                func, title = centrality_methods[metric_option]
                centrality = func(G)
            except nx.NetworkXError as e:
                st.error(f"Erro ao calcular {metric_option}: {e}")

            if centrality:
                # Cores ajust√°veis
                cmap = plt.cm.get_cmap("coolwarm")  # pode trocar para "viridis", "plasma", "Reds", etc.
                background_color = "#04051B"

                cent_vals = np.array(list(centrality.values()))
                norm = (cent_vals - cent_vals.min()) / (cent_vals.ptp() + 1e-5)
                sizes = 50 + 500 * norm
                colors = cmap(norm)

                # Plot
                plt.figure(figsize=(12, 10), facecolor=background_color)
                ax = plt.gca()
                ax.set_facecolor(background_color)

                nodes = nx.draw_networkx_nodes(
                    G, pos,
                    node_size=sizes,
                    node_color=colors,
                    cmap=cmap,
                    alpha=0.85
                )
                nx.draw_networkx_edges(
                    G, pos,
                    edge_color='white',
                    width=0.5,
                    alpha=0.15,
                    arrows=True,
                    arrowsize=6
                )

                # Labels top 5
                top_nodes = sorted(centrality.items(), key=lambda x: x[1], reverse=True)[:5]
                for node, _ in top_nodes:
                    x, y = pos[node]
                    plt.text(x, y, str(node), fontsize=9, ha='center', va='center',
                            bbox=dict(facecolor='white', edgecolor='none', alpha=0.8, boxstyle='round,pad=0.2'))

                plt.title(f"{title} ‚Äî Layout: {layout_option}", fontsize=13, color='white')

                # Adiciona colorbar com texto em branco
                cb = plt.colorbar(nodes, label="Centralidade", shrink=0.75)
                cb.ax.yaxis.label.set_color('white')  # Cor do r√≥tulo da barra
                cb.ax.tick_params(colors='white')     # Cor dos n√∫meros da escala

                plt.axis('off')

                st.pyplot(plt, clear_figure=True)

                # Interpreta√ß√£o e Top 10
                st.markdown(f"""
                ### Interpreta√ß√£o:
                - **N√≥s maiores e mais vermelhos**: maior {metric_option.split()[0]} centrality
                - **N√≥s menores e azulados**: menor centralidade
                - **Top 5 n√≥s** est√£o rotulados
                """)
                top_10_df = pd.DataFrame(
                    sorted(centrality.items(), key=lambda x: x[1], reverse=True)[:10],
                    columns=["N√≥", "Centralidade"]
                )
                st.markdown("### üîù Top 10 N√≥s por Centralidade")
                st.dataframe(top_10_df.style.format({"Centralidade": "{:.4f}"}))
            else:
                st.warning("N√£o foi poss√≠vel calcular a centralidade selecionada.")


    # =============================================
    # DISTRIBUI√á√ÉO DE GRAU
    # =============================================
    with st.expander("üìà Distribui√ß√£o de Grau", expanded=False):
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))

        # Grau de entrada
        sns.histplot(
            list(dict(G.in_degree()).values()),
            bins=30,
            ax=ax[0],
            color="skyblue",
        )
        ax[0].set_title("Distribui√ß√£o do Grau de Entrada")
        ax[0].set_xlabel("Grau de entrada")
        ax[0].set_ylabel("Frequ√™ncia")
        ax[0].set_yscale("log")  # <- Aplica escala log no eixo Y

        # Grau de sa√≠da
        sns.histplot(
            list(dict(G.out_degree()).values()),
            bins=30,
            ax=ax[1],
            color="salmon",
        )
        ax[1].set_title("Distribui√ß√£o do Grau de Sa√≠da")
        ax[1].set_xlabel("Grau de sa√≠da")
        ax[1].set_ylabel("Frequ√™ncia")
        ax[1].set_yscale("log")  # <- Tamb√©m aplica no segundo gr√°fico

        st.pyplot(fig)
        st.markdown(
            """A distribui√ß√£o de grau mostra como os n√≥s est√£o conectados na rede. A escala logar√≠tmica no eixo Y ajuda a visualizar melhor as frequ√™ncias, especialmente em redes com muitos n√≥s de grau baixo e poucos de grau alto.
            Uma distribui√ß√£o com cauda longa indica que poucos n√≥s t√™m muitos links, enquanto a maioria tem poucos."""
        )

    # =============================================
    # CONTROLES DE FILTRO (NO CORPO PRINCIPAL)
    # =============================================
    with st.expander("üåê Visualiza√ß√£o Interativa do Grafo", expanded=False):
        st.subheader("üîç Filtros do Grafo")
        col1, col2, col3 = st.columns(3)

        with col1:
            # Calcula os valores m√≠nimo e m√°ximo de grau de entrada
            in_degrees = [d for n, d in G.in_degree()]
            min_in_degree = min(in_degrees) if in_degrees else 0
            max_in_degree = max(in_degrees) if in_degrees else 1
            
            in_degree_range = st.slider(
                "Intervalo de Grau de Entrada (in-degree)",
                min_value=min_in_degree,
                max_value=max_in_degree,
                value=(2, max_in_degree//4)
            )

            # Calcula os valores m√≠nimo e m√°ximo de grau de sa√≠da
            out_degrees = [d for n, d in G.out_degree()]
            min_out_degree = min(out_degrees) if out_degrees else 0
            max_out_degree = max(out_degrees) if out_degrees else 1
            
            out_degree_range = st.slider(
                "Intervalo de Grau de Sa√≠da (out-degree)",
                min_value=min_out_degree,
                max_value=max_out_degree,
                value=(2, max_out_degree//4)
            )

        with col2:
            show_largest_scc = st.checkbox("Mostrar maior SCC (dirigido)", value=False)
        with col3:
            show_largest_wcc = st.checkbox("Mostrar maior WCC", value=False)

        # =============================================
        # APLICA√á√ÉO DOS FILTROS
        # =============================================
        if show_largest_scc and nx.is_directed(G):
            largest_scc = max(nx.strongly_connected_components(G), key=len)
            SG = G.subgraph(largest_scc).copy()
            st.info(
                f"Subgrafo: Maior SCC ‚Üí {G.number_of_nodes()} n√≥s, {G.number_of_edges()} arestas"
            )
        elif show_largest_wcc:
            largest_wcc = max(nx.weakly_connected_components(G), key=len)
            SG = G.subgraph(largest_wcc).copy()
            st.info(
                f"Subgrafo: Maior WCC ‚Üí {G.number_of_nodes()} n√≥s, {G.number_of_edges()} arestas"
            )
        else:
            # Filtragem de n√≥s com base nos intervalos selecionados
            SG_nodes = [
                n for n in G.nodes()
                if in_degree_range[0] <= G.in_degree(n) <= in_degree_range[1]
                or out_degree_range[0] <= G.out_degree(n) <= out_degree_range[1]
            ]

            # Subgrafo induzido pelos n√≥s filtrados
            SG = G.subgraph(SG_nodes).copy()

            # Exibir estat√≠sticas do subgrafo
            st.info(
                f"Subgrafo (grau de entrada ‚àà [{in_degree_range[0]}, {in_degree_range[1]}], "
                f"grau de sa√≠da ‚àà [{out_degree_range[0]}, {out_degree_range[1]}]): "
                f"{G.number_of_nodes()} n√≥s, {G.number_of_edges()} arestas"
            )

    # =============================================
    # VISUALIZA√á√ÉO PRINCIPAL DO GRAFO
    # =============================================
        net = Network(
            notebook=False,
            height="750px",
            width="100%",
            directed=True,
            bgcolor="#222222",
            font_color="white",
            cdn_resources="remote",
        )

        # Configura√ß√£o FIXA do layout (sem sliders)
        net.force_atlas_2based(
            gravity=-30,
            central_gravity=0.005,
            spring_length=150,
            spring_strength=0.03,
            damping=0.85,
            overlap=1,
        )
        net.toggle_physics(True)
        net.options.configure = {"enabled": False}

        # Calcular graus de entrada e sa√≠da
        in_degrees = dict(G.in_degree())
        out_degrees = dict(G.out_degree())

        # Evita divis√£o por zero
        max_in = max(in_degrees.values()) if in_degrees else 1
        max_out = max(out_degrees.values()) if out_degrees else 1

        # Adicionando n√≥s com personaliza√ß√£o por tipo e grau
        for node in SG.nodes():
            k_in = in_degrees.get(node, 0)
            k_out = out_degrees.get(node, 0)

            diff = abs(k_in - k_out)
            total = k_in + k_out if (k_in + k_out) > 0 else 1
            balance_ratio = (
                diff / total
            )  # 0 = totalmente balanceado, 1 = totalmente desbalanceado
            # Determina o tipo de n√≥ e sua colora√ß√£o
            if k_in > k_out:
                hue = 290 - (70 * balance_ratio)  # Vai de 290 (roxo) at√© 220 (azul)
                node_type = "Receptor"
                degree_info = f"Grau entrada: {k_in}, sa√≠da: {k_out}"
            elif k_out > k_in:
                hue = 290 - (280 * balance_ratio)  # Vai de 290 (roxo) at√© 10 (vermelho)
                node_type = "Emissor"
                degree_info = f"Grau sa√≠da: {k_out}, entrada: {k_in}"
            else:
                hue = 290  # Roxo vivo
                node_type = "Balanceado"
                degree_info = f"Grau entrada/sa√≠da: {k_in}"

            saturation = 70
            denominator = max(max_in, max_out)
            lightness = 60 - min(20, total / denominator * 20) if denominator > 0 else 60
            degree_info = f"Grau entrada: {k_in}, sa√≠da: {k_out}"

            net.add_node(
                node,
                label=str(node),
                size=10 + (k_in + k_out) * 0.2,
                color=f"hsl({hue}, {saturation}%, {lightness}%)",
                title=f"N√≥: {node}\nTipo: {node_type}\n{degree_info}",
            )

        # Adicionando arestas com personaliza√ß√£o FIXA
        for u, v, data in SG.edges(data=True):
            weight = data.get("weight", 1.0)
            net.add_edge(
                u,
                v,
                width=0.5 + float(weight) * 0.1,
                title=f"Peso: {weight:.2f}",
                color="#97C2FC",
            )

        # Salvar e exibir
        tmp_dir = tempfile.mkdtemp()
        path = os.path.join(tmp_dir, "graph.html")
        net.save_graph(path)
        st.components.v1.html(open(path, "r", encoding="utf-8").read(), height=750)

    # =============================================
    # M√âTRICAS ESTRUTURAIS
    # =============================================
    with st.expander(f"üìä M√©tricas Estruturais da Rede(C/Filtro)", expanded=False):
        col1, col2 = st.columns(2)

        with col1:
            st.metric("Densidade", f"{nx.density(SG):.4f}", help=help_densidade)
            
            assort = calcular_assortatividade_segura(SG)
            st.metric(
                "Assortatividade(grau do n√≥)",
                f"{assort:.4f}" if assort is not None else "N/A",
                help=help_assortatividade,
            )
            st.metric(
                "Coef. Clustering",
                f"{nx.average_clustering(SG.to_undirected()):.4f}",
                help=help_clustering,
            )

        with col2:
            scc = (
                nx.number_strongly_connected_components(SG)
                if nx.is_directed(SG)
                else "N/A"
            )
            st.metric("Componentes Fortemente Conectados", scc, help=help_scc)
            st.metric(
                "Componentes Fracamente Conectados",
                nx.number_weakly_connected_components(SG),
                help=help_wcc,
            )

    # =============================================
    # DISTRIBUI√á√ÉO DE GRAU
    # =============================================
    with st.expander("üìà Distribui√ß√£o de Grau (C/filtro)", expanded=False):
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))

        # Grau de entrada
        sns.histplot(
            list(dict(SG.in_degree()).values()),
            bins=30,
            ax=ax[0],
            color="skyblue",
        )
        ax[0].set_title("Distribui√ß√£o do Grau de Entrada")
        ax[0].set_xlabel("Grau de entrada")
        ax[0].set_ylabel("Frequ√™ncia")
        # Escala linear padr√£o (sem set_yscale)

        # Grau de sa√≠da
        sns.histplot(
            list(dict(SG.out_degree()).values()),
            bins=30,
            ax=ax[1],
            color="salmon",
        )
        ax[1].set_title("Distribui√ß√£o do Grau de Sa√≠da")
        ax[1].set_xlabel("Grau de sa√≠da")
        ax[1].set_ylabel("Frequ√™ncia")
        # Escala linear padr√£o

        st.pyplot(fig)
        st.markdown(
            """
            A distribui√ß√£o de grau mostra como os n√≥s est√£o conectados na rede. 
            Uma distribui√ß√£o com cauda longa indica que poucos n√≥s t√™m muitos links, 
            enquanto a maioria tem poucos.
            """
        )

    # =============================================
    # AN√ÅLISE DE CENTRALIDADE (COM CONTROLES NO CORPO)
    # =============================================

    with st.expander("‚≠ê An√°lise de Centralidade", expanded=False):
        st.markdown(
            """
        Compare as diferentes medidas de centralidade para identificar os n√≥s mais importantes:
        - **Degree**: N√≥s mais conectados
        - **Closeness**: N√≥s que podem alcan√ßar outros mais rapidamente
        - **Betweenness**: N√≥s que atuam como pontes
        - **Eigenvector**: N√≥s conectados a outros n√≥s importantes
        """
        )

        # Controles no corpo principal (n√£o na sidebar)
        col1, col2 = st.columns(2)
        with col1:
            metric = st.selectbox(
                "M√©trica de Centralidade",
                ["Degree", "Closeness", "Betweenness", "Eigenvector"],
            )
        with col2:
            k = st.slider("N√∫mero de n√≥s para mostrar", 1, 100, 10)

        # C√°lculo da centralidade
        if metric == "Degree":
            centrality = nx.degree_centrality(G)
        elif metric == "Closeness":
            centrality = nx.closeness_centrality(G)
        elif metric == "Betweenness":
            centrality = nx.betweenness_centrality(G)
        elif metric == "Eigenvector":
            try:
                centrality = nx.eigenvector_centrality(G, max_iter=1000)
            except nx.PowerIterationFailedConvergence:
                st.error(
                    "N√£o foi poss√≠vel calcular Eigenvector Centrality (grafo muito esparso)"
                )
                centrality = {}

        if centrality:
            # Mostra os n√≥s mais centrais em uma tabela
            top_nodes = sorted(centrality.items(), key=lambda x: x[1], reverse=True)[:k]
            st.dataframe(pd.DataFrame(top_nodes, columns=["N√≥", "Centralidade"]))

            # Visualiza√ß√£o dos top-k n√≥s (com configura√ß√µes FIXAS)
            st.markdown("### üîù Visualiza√ß√£o dos N√≥s Mais Importantes")
            H = G.subgraph([n for n, _ in top_nodes])

            net2 = Network(
                notebook=False,
                height="500px",
                width="100%",
                directed=True,
                bgcolor="#222222",
                font_color="white",
                cdn_resources="remote",
            )

            # Mesma configura√ß√£o FIXA do layout
            net2.force_atlas_2based(
                gravity=-30,
                central_gravity=0.005,
                spring_length=150,
                spring_strength=0.03,
                damping=0.85,
                overlap=1,
            )
            net2.toggle_physics(True)
            net2.options.configure = {"enabled": False}

            # Calcular graus de entrada e sa√≠da #alterei H por G nos dois
            in_degrees = dict(G.in_degree())
            out_degrees = dict(G.out_degree())

            # Evita divis√£o por zero se grafo estiver vazio
            max_in = max(in_degrees.values()) if in_degrees else 1
            max_out = max(out_degrees.values()) if out_degrees else 1

            # Adiciona n√≥s com colora√ß√£o e tamanho baseados em grau
            for node in H.nodes():
                k_in = in_degrees.get(node, 0)
                k_out = out_degrees.get(node, 0)

                diff = abs(k_in - k_out)
                total = k_in + k_out
                balance_ratio = diff / (total + 1e-10)  # Evita divis√£o por zero
                # Determina o tipo de n√≥ e sua colora√ß√£o

                if k_in > k_out:
                    hue = 290 - (70 * balance_ratio)
                    node_type = "Receptor"
                    degree_info = f"Grau entrada: {k_in}, Grau sa√≠da: {k_out}"
                elif k_out > k_in:
                    hue = 290 - (
                        280 * balance_ratio
                    )  # Vai de 290 (roxo) at√© 10(vermelho)
                    node_type = "Emissor"
                    degree_info = f"Grau sa√≠da: {k_out}, Grau entrada: {k_in}"
                else:
                    hue = 290  # Roxo vivo
                    node_type = "Balanceado"
                    degree_info = f"Grau entrada/sa√≠da: {k_in}"

                saturation = 70
                
                max_connections = max(max_in, max_out)
                if max_connections == 0:
                    lightness = 60  # Valor padr√£o quando n√£o h√° conex√µes
                else:
                    lightness = 60 - min(20, total / max_connections * 20)
                
                
                degree_info = f"Grau entrada: {k_in}, sa√≠da: {k_out}"

                net2.add_node(
                    node,
                    label=str(node),
                    size=10 + (k_in + k_out) * 0.2,
                    color=f"hsl({hue}, {saturation}%, {lightness}%)",
                    title=(
                        f"N√≥: {node}\n"
                        f"Tipo: {node_type}\n"
                        f"{degree_info}\n"
                        f"{metric}: {centrality.get(node, 0):.4f}"
                    ),
                )

            # Adiciona arestas (configura√ß√£o FIXA)
            for u, v, data in H.edges(data=True):
                weight = data.get("weight", 1.0)
                net2.add_edge(
                    u,
                    v,
                    width=0.5 + float(weight) * 0.1,
                    title=f"Peso: {weight:.2f}",
                    color="#FF9999",  # Cor mais clara para arestas
                )

            # Exibe o grafo
            path2 = os.path.join(tempfile.mkdtemp(), "topk.html")
            net2.save_graph(path2)
            st.components.v1.html(open(path2, "r", encoding="utf-8").read(), height=500)

    # =============================================
    # EXPORTA√á√ÉO DO GRAFO
    # =============================================

    with st.expander("üì§ Exportar Grafo", expanded=False):
        st.markdown(
            "Voc√™ pode exportar o grafo filtrado para um arquivo GraphML ou GEXF."
        )
        col1, col2 = st.columns(2)

        with col1:
            export_format = st.selectbox("Formato de Exporta√ß√£o", ["GraphML", "GEXF"])
        with col2:
            export_button = st.button("Exportar Grafo")

        if export_button:
            # Define nome com base nos filtros aplicados
            filtros_aplicados = []
            if show_largest_scc:
                filtros_aplicados.append("scc")
            if show_largest_wcc:
                filtros_aplicados.append("wcc")
            if min_degree > 1:
                filtros_aplicados.append(f"grau_min_{min_degree}")

            grafo_filtrado = (
                "_".join(filtros_aplicados) if filtros_aplicados else "original"
            )
            export_filename = f"grafo_{grafo_filtrado}.{export_format.lower()}"

            # Cria arquivo tempor√°rio com nome significativo
            tmp_dir = tempfile.gettempdir()
            tmp_path = os.path.join(tmp_dir, export_filename)

            # Salva o grafo
            if export_format == "GraphML":
                nx.write_graphml(SG, tmp_path)
            elif export_format == "GEXF":
                nx.write_gexf(SG, tmp_path)

            # Informa sucesso e bot√£o de download
            st.success(f"Grafo exportado como {export_filename}")
            with open(tmp_path, "rb") as f:
                st.download_button(
                    label="üì• Baixar Arquivo",
                    data=f.read(),
                    file_name=export_filename,
                    mime="application/octet-stream",
                )

            # Remove arquivo ap√≥s leitura
            os.remove(tmp_path)
            st.info(
                "O arquivo ser√° removido ap√≥s o download para evitar ac√∫mulo de arquivos tempor√°rios."
            )
